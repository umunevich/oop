//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Learning\University2\OOP\oop repo\lab1\lab1\Calculator\CellCraftCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Calculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CellCraftLexer : Lexer {
	public const int
		NUMBER=1, IDENTIFIER=2, INTEGER=3, OP_ADD=4, OP_SUBTRACT=5, OP_MULTIPLY=6, 
		OP_DIVIDE=7, OP_EXPONENT=8, OP_INC=9, OP_DEC=10, OP_EQUAL=11, OP_LESS=12, 
		OP_GREATER=13, OP_LESS_EQUAL=14, OP_GREATER_EQUAL=15, OP_NOT_EQUAL=16, 
		LPAREN=17, RPAREN=18, WS=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "IDENTIFIER", "INTEGER", "OP_ADD", "OP_SUBTRACT", "OP_MULTIPLY", 
		"OP_DIVIDE", "OP_EXPONENT", "OP_INC", "OP_DEC", "OP_EQUAL", "OP_LESS", 
		"OP_GREATER", "OP_LESS_EQUAL", "OP_GREATER_EQUAL", "OP_NOT_EQUAL", "LPAREN", 
		"RPAREN", "WS"
	};


	public CellCraftLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'^'", "'++'", "'--'", 
		"'=='", "'<'", "'>'", "'<='", "'>='", "'<>'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "IDENTIFIER", "INTEGER", "OP_ADD", "OP_SUBTRACT", "OP_MULTIPLY", 
		"OP_DIVIDE", "OP_EXPONENT", "OP_INC", "OP_DEC", "OP_EQUAL", "OP_LESS", 
		"OP_GREATER", "OP_LESS_EQUAL", "OP_GREATER_EQUAL", "OP_NOT_EQUAL", "LPAREN", 
		"RPAREN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CellCraftCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x15i\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2"+
		"\x3\x2\x5\x2-\n\x2\x3\x3\x6\x3\x30\n\x3\r\x3\xE\x3\x31\x3\x3\x3\x3\x6"+
		"\x3\x36\n\x3\r\x3\xE\x3\x37\x3\x4\x6\x4;\n\x4\r\x4\xE\x4<\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x6\x14"+
		"\x64\n\x14\r\x14\xE\x14\x65\x3\x14\x3\x14\x2\x2\x2\x15\x3\x2\x3\x5\x2"+
		"\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14"+
		"\'\x2\x15\x3\x2\x6\x3\x2\x43\\\x3\x2\x33;\x3\x2\x32;\x4\x2\v\f\xF\xFm"+
		"\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2"+
		"\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2"+
		"\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2"+
		"\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3"+
		"\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x3)\x3\x2\x2"+
		"\x2\x5/\x3\x2\x2\x2\a:\x3\x2\x2\x2\t>\x3\x2\x2\x2\v@\x3\x2\x2\x2\r\x42"+
		"\x3\x2\x2\x2\xF\x44\x3\x2\x2\x2\x11\x46\x3\x2\x2\x2\x13H\x3\x2\x2\x2\x15"+
		"K\x3\x2\x2\x2\x17N\x3\x2\x2\x2\x19Q\x3\x2\x2\x2\x1BS\x3\x2\x2\x2\x1DU"+
		"\x3\x2\x2\x2\x1FX\x3\x2\x2\x2![\x3\x2\x2\x2#^\x3\x2\x2\x2%`\x3\x2\x2\x2"+
		"\'\x63\x3\x2\x2\x2),\x5\a\x4\x2*+\a\x30\x2\x2+-\x5\a\x4\x2,*\x3\x2\x2"+
		"\x2,-\x3\x2\x2\x2-\x4\x3\x2\x2\x2.\x30\t\x2\x2\x2/.\x3\x2\x2\x2\x30\x31"+
		"\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2"+
		"\x33\x35\t\x3\x2\x2\x34\x36\t\x4\x2\x2\x35\x34\x3\x2\x2\x2\x36\x37\x3"+
		"\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x6\x3\x2\x2\x2\x39"+
		";\t\x4\x2\x2:\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2"+
		"=\b\x3\x2\x2\x2>?\a-\x2\x2?\n\x3\x2\x2\x2@\x41\a/\x2\x2\x41\f\x3\x2\x2"+
		"\x2\x42\x43\a,\x2\x2\x43\xE\x3\x2\x2\x2\x44\x45\a\x31\x2\x2\x45\x10\x3"+
		"\x2\x2\x2\x46G\a`\x2\x2G\x12\x3\x2\x2\x2HI\a-\x2\x2IJ\a-\x2\x2J\x14\x3"+
		"\x2\x2\x2KL\a/\x2\x2LM\a/\x2\x2M\x16\x3\x2\x2\x2NO\a?\x2\x2OP\a?\x2\x2"+
		"P\x18\x3\x2\x2\x2QR\a>\x2\x2R\x1A\x3\x2\x2\x2ST\a@\x2\x2T\x1C\x3\x2\x2"+
		"\x2UV\a>\x2\x2VW\a?\x2\x2W\x1E\x3\x2\x2\x2XY\a@\x2\x2YZ\a?\x2\x2Z \x3"+
		"\x2\x2\x2[\\\a>\x2\x2\\]\a@\x2\x2]\"\x3\x2\x2\x2^_\a*\x2\x2_$\x3\x2\x2"+
		"\x2`\x61\a+\x2\x2\x61&\x3\x2\x2\x2\x62\x64\t\x5\x2\x2\x63\x62\x3\x2\x2"+
		"\x2\x64\x65\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\x3"+
		"\x2\x2\x2gh\b\x14\x2\x2h(\x3\x2\x2\x2\b\x2,\x31\x37<\x65\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Calculator
