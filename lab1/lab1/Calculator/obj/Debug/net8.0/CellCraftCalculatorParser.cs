//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Learning\University2\OOP\oop repo\lab1\lab1\Calculator\CellCraftCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Calculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CellCraftCalculatorParser : Parser {
	public const int
		NUMBER=1, IDENTIFIER=2, INTEGER=3, OP_ADD=4, OP_SUBTRACT=5, OP_MULTIPLY=6, 
		OP_DIVIDE=7, OP_EXPONENT=8, OP_INC=9, OP_DEC=10, OP_EQUAL=11, OP_LESS=12, 
		OP_GREATER=13, OP_LESS_EQUAL=14, OP_GREATER_EQUAL=15, OP_NOT_EQUAL=16, 
		LPAREN=17, RPAREN=18, WS=19;
	public const int
		RULE_compileUnit = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"compileUnit", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'^'", "'++'", "'--'", 
		"'=='", "'<'", "'>'", "'<='", "'>='", "'<>'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "IDENTIFIER", "INTEGER", "OP_ADD", "OP_SUBTRACT", "OP_MULTIPLY", 
		"OP_DIVIDE", "OP_EXPONENT", "OP_INC", "OP_DEC", "OP_EQUAL", "OP_LESS", 
		"OP_GREATER", "OP_LESS_EQUAL", "OP_GREATER_EQUAL", "OP_NOT_EQUAL", "LPAREN", 
		"RPAREN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CellCraftCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CellCraftCalculatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CellCraftCalculatorParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; expression(0);
			State = 5; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicativeExprContext : ExpressionContext {
		public IToken operatorToken;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_MULTIPLY() { return GetToken(CellCraftCalculatorParser.OP_MULTIPLY, 0); }
		public ITerminalNode OP_DIVIDE() { return GetToken(CellCraftCalculatorParser.OP_DIVIDE, 0); }
		public MultiplicativeExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementExprContext : ExpressionContext {
		public IToken operatorToken;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OP_INC() { return GetToken(CellCraftCalculatorParser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CellCraftCalculatorParser.OP_DEC, 0); }
		public IncrementExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterIncrementExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitIncrementExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentialExprContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_EXPONENT() { return GetToken(CellCraftCalculatorParser.OP_EXPONENT, 0); }
		public ExponentialExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterExponentialExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitExponentialExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentialExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExprContext : ExpressionContext {
		public IToken operatorToken;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_ADD() { return GetToken(CellCraftCalculatorParser.OP_ADD, 0); }
		public ITerminalNode OP_SUBTRACT() { return GetToken(CellCraftCalculatorParser.OP_SUBTRACT, 0); }
		public AdditiveExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : ExpressionContext {
		public IToken operatorToken;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_EQUAL() { return GetToken(CellCraftCalculatorParser.OP_EQUAL, 0); }
		public ITerminalNode OP_LESS() { return GetToken(CellCraftCalculatorParser.OP_LESS, 0); }
		public ITerminalNode OP_GREATER() { return GetToken(CellCraftCalculatorParser.OP_GREATER, 0); }
		public ITerminalNode OP_LESS_EQUAL() { return GetToken(CellCraftCalculatorParser.OP_LESS_EQUAL, 0); }
		public ITerminalNode OP_GREATER_EQUAL() { return GetToken(CellCraftCalculatorParser.OP_GREATER_EQUAL, 0); }
		public ITerminalNode OP_NOT_EQUAL() { return GetToken(CellCraftCalculatorParser.OP_NOT_EQUAL, 0); }
		public CompareExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExprContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(CellCraftCalculatorParser.NUMBER, 0); }
		public NumberExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CellCraftCalculatorParser.IDENTIFIER, 0); }
		public IdentifierExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(CellCraftCalculatorParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(CellCraftCalculatorParser.RPAREN, 0); }
		public ParenthesizedExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICellCraftCalculatorListener typedListener = listener as ICellCraftCalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICellCraftCalculatorVisitor<TResult> typedVisitor = visitor as ICellCraftCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 8; Match(LPAREN);
				State = 9; expression(0);
				State = 10; Match(RPAREN);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 12; Match(NUMBER);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 13; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 32;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 30;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 16;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 17;
						((AdditiveExprContext)_localctx).operatorToken = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==OP_ADD || _la==OP_SUBTRACT) ) {
							((AdditiveExprContext)_localctx).operatorToken = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 18; expression(8);
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 19;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 20;
						((MultiplicativeExprContext)_localctx).operatorToken = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==OP_MULTIPLY || _la==OP_DIVIDE) ) {
							((MultiplicativeExprContext)_localctx).operatorToken = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 21; expression(7);
						}
						break;

					case 3:
						{
						_localctx = new ExponentialExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 22;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 23; Match(OP_EXPONENT);
						State = 24; expression(6);
						}
						break;

					case 4:
						{
						_localctx = new CompareExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 25;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 26;
						((CompareExprContext)_localctx).operatorToken = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_EQUAL) | (1L << OP_LESS) | (1L << OP_GREATER) | (1L << OP_LESS_EQUAL) | (1L << OP_GREATER_EQUAL) | (1L << OP_NOT_EQUAL))) != 0)) ) {
							((CompareExprContext)_localctx).operatorToken = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 27; expression(4);
						}
						break;

					case 5:
						{
						_localctx = new IncrementExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 28;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 29;
						((IncrementExprContext)_localctx).operatorToken = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==OP_INC || _la==OP_DEC) ) {
							((IncrementExprContext)_localctx).operatorToken = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					} 
				}
				State = 34;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 7);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15&\x4\x2\t\x2"+
		"\x4\x3\t\x3\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3\x11\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3!\n\x3\f\x3\xE\x3$\v\x3\x3\x3\x2\x2"+
		"\x3\x4\x4\x2\x2\x4\x2\x2\x6\x3\x2\x6\a\x3\x2\b\t\x3\x2\r\x12\x3\x2\v\f"+
		"*\x2\x6\x3\x2\x2\x2\x4\x10\x3\x2\x2\x2\x6\a\x5\x4\x3\x2\a\b\a\x2\x2\x3"+
		"\b\x3\x3\x2\x2\x2\t\n\b\x3\x1\x2\n\v\a\x13\x2\x2\v\f\x5\x4\x3\x2\f\r\a"+
		"\x14\x2\x2\r\x11\x3\x2\x2\x2\xE\x11\a\x3\x2\x2\xF\x11\a\x4\x2\x2\x10\t"+
		"\x3\x2\x2\x2\x10\xE\x3\x2\x2\x2\x10\xF\x3\x2\x2\x2\x11\"\x3\x2\x2\x2\x12"+
		"\x13\f\t\x2\x2\x13\x14\t\x2\x2\x2\x14!\x5\x4\x3\n\x15\x16\f\b\x2\x2\x16"+
		"\x17\t\x3\x2\x2\x17!\x5\x4\x3\t\x18\x19\f\a\x2\x2\x19\x1A\a\n\x2\x2\x1A"+
		"!\x5\x4\x3\b\x1B\x1C\f\x5\x2\x2\x1C\x1D\t\x4\x2\x2\x1D!\x5\x4\x3\x6\x1E"+
		"\x1F\f\x6\x2\x2\x1F!\t\x5\x2\x2 \x12\x3\x2\x2\x2 \x15\x3\x2\x2\x2 \x18"+
		"\x3\x2\x2\x2 \x1B\x3\x2\x2\x2 \x1E\x3\x2\x2\x2!$\x3\x2\x2\x2\" \x3\x2"+
		"\x2\x2\"#\x3\x2\x2\x2#\x5\x3\x2\x2\x2$\"\x3\x2\x2\x2\x5\x10 \"";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Calculator
